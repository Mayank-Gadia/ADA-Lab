#include <iostream>
#include <climits>
using namespace std;

// Function to find the minimum of two integers
int min(int a, int b) {
    return (a < b) ? a : b;
}

// Function to perform Floyd-Warshall algorithm
void floyds(int p[10][10], int n) {
    for (int k = 1; k <= n; k++)
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++)
                if (i != j)
                    p[i][j] = min(p[i][j], p[i][k] + p[k][j]);
}

int main() {
    int p[10][10], w, n, e, u, v, i, j;

    // Input the number of vertices and edges
    cout << "\n Enter the number of vertices:";
    cin >> n;
    cout << "\n Enter the number of edges:\n";
    cin >> e;

    // Initialize matrix with maximum values
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            p[i][j] = (i == j) ? 0 : INT_MAX;

    // Input the end vertices and weights of each edge
    for (i = 1; i <= e; i++) {
        cout << "\n Enter the end vertices of edge " << i << " with its weight \n";
        cin >> u >> v >> w;
        p[u][v] = w;
    }

    // Display the matrix of input data
    cout << "\n Matrix of input data:\n";
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            if (p[i][j] == INT_MAX)
                cout << "INF\t";
            else
                cout << p[i][j] << "\t";
        }
        cout << "\n";
    }

    // Compute and display the transitive closure
    floyds(p, n);
    cout << "\n Transitive closure:\n";
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            if (p[i][j] == INT_MAX)
                cout << "INF\t";
            else
                cout << p[i][j] << "\t";
        }
        cout << "\n";
    }

    // Display the shortest paths
    cout << "\n The shortest paths are:\n";
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            if (i != j && p[i][j] != INT_MAX)
                cout << "\n <" << i << "," << j << ">=" << p[i][j];

    return 0;
}
