#include <iostream>
using namespace std;


// Function to compute the transitive closure using Warshall's algorithm
void warshall(int p[10][10], int n) {
    for (int k = 0; k < n; k++)
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                p[i][j] = p[i][j] || (p[i][k] && p[k][j]);
}

int main() {
    int p[10][10] = {0}, n, e, u, v, i, j;

    // Input the number of vertices and edges
    cout << "\n Enter the number of vertices:";
    cin >> n;
    cout << "\n Enter the number of edges:";
    cin >> e;

    // Input the end vertices of each edge
    for (i = 0; i < e; i++) {
        cout << "\n Enter the end vertices of edge " << i + 1 << ":";
        cin >> u >> v;
        p[u][v] = 1;
    }

    // Display the matrix of input data
    cout << "\n Matrix of input data: \n";
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            cout << p[i][j] << "\t";
        cout << "\n";
    }

    // Set diagonal elements to 1
    for (i = 0; i < n; i++) {
        p[i][i] = 1;
    }

    // Compute and display the transitive closure
    warshall(p, n);
    cout << "\n Transitive closure: \n";
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            cout << p[i][j] << "\t";
        cout << "\n";
    }

    return 0;
}
