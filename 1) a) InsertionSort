#include <iostream>
#include <chrono>

using namespace std;

// Function to print an array
void printArray(int array[], int size) {
    for (int i = 0; i < size; i++) {
        cout << array[i] << " ";
    }
    cout << endl;
}

void insertionSort(int array[], int size) {
    for (int step = 1; step < size; step++) {
        int key = array[step];
        int j = step - 1;

        // Compare key with each element on the left of it until an element smaller than
        // it is found.
        // For descending order, change key < array[j] to key > array[j].
        while (j >= 0 && key < array[j]) {
            array[j + 1] = array[j];
            --j;
        }
        array[j + 1] = key;
    }
}

int main() {
    int data[] = {9, 5, 1, 4, 3};
    int size = sizeof(data) / sizeof(data[0]);

    insertionSort(data, size);

    cout << "Sorted array in ascending order:\n";
    printArray(data, size);

    auto insertionSortStartTime = chrono::high_resolution_clock::now();
    insertionSort(data, size - 1);
    auto insertionSortEndTime = chrono::high_resolution_clock::now();

    chrono::duration<double> insertionSortExecutionTime = (insertionSortEndTime - insertionSortStartTime);

    cout << "Insertion Sort Execution Time: " << insertionSortExecutionTime.count() << " seconds.\n";
    cout << "Space used by Insertion Sort: " << sizeof(data) + size * sizeof(data[0]) << " bytes.\n";

    return 0;
}
