#include <iostream>
using namespace std;

const int MAX_NODES = 10;

int n, adjacencyMatrix[MAX_NODES][MAX_NODES], visited[MAX_NODES], count = 0;

// Depth-First Search (DFS) function
void dfs(int node) {
    count++;
    visited[node] = count;

    // Print the visited node
    if (visited[node] != 0)
        cout << node << "\t";

    // Explore adjacent nodes
    for (int neighbor = 0; neighbor < n; neighbor++)
        if (adjacencyMatrix[node][neighbor] == 1 && visited[neighbor] == 0)
            dfs(neighbor);
}

int main() {
    // Input the number of nodes
    cout << "\nEnter the number of Nodes: ";
    cin >> n;

    // Input the adjacency matrix
    cout << "\nEnter the Adjacency Matrix:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> adjacencyMatrix[i][j];

    // Initialize the visited array
    for (int i = 0; i < n; i++)
        visited[i] = 0;

    // Perform DFS traversal and print the result
    cout << "\nDFS:\t";
    for (int i = 0; i < n; i++)
        if (visited[i] == 0)
            dfs(i);

    cout << "\n";

    return 0;
}
