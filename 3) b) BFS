#include <iostream>
using namespace std;

// Function to perform Breadth-First Search (BFS)
void BFS(int adjacencyMatrix[20][20], int source, int visited[20], int n);

int main() {
    int n, adjacencyMatrix[20][20], visited[20], source;

    // Input the number of vertices
    cout << "Enter the number of vertices:";
    cin >> n;

    cout << "\nEnter the adjacency matrix:\n";

    // Input the adjacency matrix
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            cin >> adjacencyMatrix[i][j];

    // Initialize the visited array
    for (int i = 1; i <= n; i++)
        visited[i] = 0;

    // Input the source node
    cout << "\nEnter the source node:";
    cin >> source;

    visited[source] = 1;
    BFS(adjacencyMatrix, source, visited, n);

    // Display the reachability status of each node
    for (int i = 1; i <= n; i++) {
        if (visited[i] != 0)
            cout << "\n Node " << i << " is reachable";
        else
            cout << "\n Node " << i << " is not reachable";
    }

    return 0;
}

// Implementation of Breadth-First Search (BFS)
void BFS(int adjacencyMatrix[20][20], int source, int visited[20], int n) {
    int queue[20], front = 0, rear = -1, u, v;

    // Enqueue the source node
    queue[++rear] = source;

    // Perform BFS
    while (front <= rear) {
        u = queue[front++];

        // Explore adjacent nodes
        for (v = 1; v <= n; v++) {
            if (adjacencyMatrix[u][v] == 1 && visited[v] == 0) {
                queue[++rear] = v;
                visited[v] = 1;
            }
        }
    }
}
