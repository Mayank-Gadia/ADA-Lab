#include <iostream>

using namespace std;

// Function to swap elements
void swap(int *a, int *b) {
    int t = *a;
    *a = *b;
    *b = t;
}

// Function to partition the array and return the pivot index
int partition(int array[], int low, int high) {
    int pivot = array[high];
    int i = low - 1;

    // Iterate through the array and rearrange elements based on the pivot
    for (int j = low; j < high; j++) {
        if (array[j] <= pivot) {
            i++;
            swap(&array[i], &array[j]);
        }
    }

    // Swap the pivot with the element at (i + 1)
    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

// Recursive function to perform quicksort on the array
void quickSort(int array[], int low, int high) {
    if (low < high) {
        // Find the pivot index and recursively sort the subarrays
        int pi = partition(array, low, high);
        quickSort(array, low, pi - 1);
        quickSort(array, pi + 1, high);
    }
}

// Function to print the elements of the array
void printArray(int array[], int size) {
    for (int i = 0; i < size; i++)
        cout << array[i] << " ";
    cout << endl;
}

int main() {
    // Sample array to be sorted
    int data[] = {8, 7, 6, 1, 0, 9, 2};
    int n = sizeof(data) / sizeof(data[0]);

    // Display the unsorted array
    cout << "Unsorted Array: \n";
    printArray(data, n);

    // Perform quicksort on the array
    quickSort(data, 0, n - 1);

    // Display the sorted array
    cout << "Sorted array in ascending order: \n";
    printArray(data, n);
    return 0;
}
